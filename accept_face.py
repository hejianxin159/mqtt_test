# -*- coding: utf-8 -*-
# Author : hejianxin
# Time : 2021/7/13 1:56 下午
from logger.logger import logger
from util.connecnt import ConnectBase
import json
import os
from conf.config import Config
from models.models import db_session, ClockRecord, NewClockIn, MqttTask, Camera
from util.set_cache import redis_store, set_clock_cache
import datetime
import uuid
import time
from util.save_file import upload_base64_image
import base64


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        logger.info("business Connect success")
    else:
        logger.info(f"Connect failed result code {str(rc)}")


def on_message(client, userdata, msg):
    message = str(msg.payload, encoding="utf-8")
    message = message.replace("\n", "").replace("\x00", "")
    json_message = json.loads(message)
    # json_message = msg
    print(json_message)
    if json_message["type"] == "face_result":
        face_result(json_message["body"])


def on_disconnect(client, userdata, rc):
    if rc == 0:
        logger.info("success disconnect")
    if rc != 0:
        logger.info("Unexpected disconnection %s" % rc)


def create_record_in(project_id, record_date, person_type, person_resource, camera_direction, record_time, work_type):
    # 找不到缓存就新建
    clock_in = NewClockIn(
        project_id=project_id,
        work_time=record_date,
        type=person_type,
        labour_roster=person_resource,
        work_type=work_type
    )
    if camera_direction == 0:
        clock_in.in_time = record_time
    else:
        clock_in.out_time = record_time
    db_session.add(clock_in)
    db_session.commit()
    print(f"{person_resource}|{project_id}|{datetime.datetime.now().date().strftime('%Y-%m-%d')}")
    set_clock_cache(f"{person_resource}|{project_id}|{datetime.datetime.now().date().strftime('%Y-%m-%d')}", clock_in.id)
    return clock_in


def face_result(data_item):
    device_no = data_item["sn"]
    person_resource = data_item["per_id"]
    now = datetime.datetime.now()
    # 记录考勤时间
    record_time = now.strftime("%Y-%m-%d %H:%M:%S")
    # 考勤天数
    record_date = now.date()
    camera_obj = db_session.query(Camera).filter(Camera.device_no == device_no,
                                                 Camera.status == 1).first()
    if not camera_obj:
        logger.error(f"not find camera sn {device_no}")
        return
    project_id = camera_obj.project_id
    camera_direction = camera_obj.direction
    person_resource = f"{person_resource[:8]}-" \
                      f"{person_resource[8:12]}-" \
                      f"{person_resource[12:16]}-" \
                      f"{person_resource[16:20]}-" \
                      f"{person_resource[20:]}"
    file_path = ''
    try:
        file_path = upload_base64_image(project_id,
                                        'head_file',
                                        'staff',
                                        data_item["img_data"].encode())
    except Exception as e:
        logger.error(f"save picture error {e}")
    # 查找任务
    task = db_session.query(MqttTask).filter(MqttTask.camera_id == camera_obj.resource_id,
                                             MqttTask.project_id == project_id,
                                             MqttTask.person_resource == person_resource).first()
    if not task:
        logger.warn(f"not find task {data_item}")
        return
    person_type = task.person_type

    record_in_cache_key = person_resource + '|' + project_id + '|' + datetime.datetime.now().date().strftime("%Y-%m-%d")
    record_in_cache_val = redis_store.get(record_in_cache_key)
    if not record_in_cache_val:
        # 找不到缓存就新建
        clock_in = create_record_in(project_id, record_date,
                                    person_type, person_resource,
                                    camera_direction, record_time, task.work_type)
    else:
        clock_in = db_session.query(NewClockIn).filter(NewClockIn.id == int(record_in_cache_val)).first()
        if not clock_in:
            # 找不到记录就新增
            clock_in = create_record_in(project_id, record_date,
                                        person_type, person_resource,
                                        camera_direction, record_time, task.work_type)
        # elif clock_in.work_time != record_date:
        #     # 如果工日不是当天就新建
        #     clock_in = create_record_in(project_id, record_date,
        #                                 person_type, person_resource,
        #                                 camera_direction, record_time)
        elif not clock_in.in_time and camera_direction == 0:
            # 如果没有in或者out 且摄像头是进入方向
            clock_in.in_time = record_time
        elif clock_in.in_time and not clock_in.out_time and camera_direction == 0:
            # 如果有in 没有 out 就覆盖in
            clock_in.in_time = record_time
            clock_in.clock_status = "IN"
        elif clock_in.in_time and clock_in.out_time and camera_direction == 0:
            # 如果有in 有out
            if clock_in.out_time < record_time:
                clock_in.clock_status = 'IN'
        elif clock_in.out_time and not clock_in.in_time and camera_direction == 1:
            clock_in.out_time = record_time
            clock_in.clock_status = 'OUT'
        elif clock_in.out_time and clock_in.in_time and camera_direction == 1:
            clock_in.out_time = record_time
            clock_in.clock_status = 'OUT'
        elif camera_direction == 1:
            # 摄像头方向是出去方向
            clock_in.out_time = record_time

        db_session.add(clock_in)
    # 记录流水
    db_session.add(ClockRecord(
            project_id=project_id,
            work_time=record_date,
            type=person_type,
            punch_clock_time=record_time,
            direction=camera_direction,
            clock_in_id=clock_in.resource_id,
            file_path=file_path,
            camera_id=camera_obj.resource_id,
            labour_roster=person_resource

    ))
    db_session.commit()


class Connect(ConnectBase):
    DEFAULT_CALLBACK = {
        "on_connect": on_connect,
        "on_disconnect": on_disconnect,
        "on_message": on_message
    }


business = Connect(mqtt_host=Config.MQTT_HOST,
                   mqtt_port=Config.MQTT_PORT,
                   mqtt_username=Config.MQTT_USERNAME,
                   mqtt_password=Config.MQTT_PASSWORD)

topic = f"face/response"
business.mqtt_client.subscribe(topic, 0)


while True:
    pass
# on_message('', '', {'body': {'e_imgsize': 24241, 'hat': 0, 'idcard': '', 'img_data': '', 'isurl': False, 'mask': 0, 'matched': 91, 'name': '贺建鑫', 'name_base64': '6LS65bu66ZGrAAAAAAAAAA==', 'per_id': 'd0dd27b7fe5f41c591792e71d8b0d7e1', 'per_id_base64': 'ZDBkZDI3YjdmZTVmNDFjNTkxNzkyZTcxZDhiMGQ3ZTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==', 'role': 0, 'sequence': 4007, 'sn': 'b1da57e8-7fb982c4', 'tep': 0, 'usec': 1626427771}, 'type': 'face_result'})
